1. Проанализируйте задания предыдущих уроков.
a. В каких случаях необходима была явная передача указателя в качестве входных параметров и возвращаемых результатов или в качестве приёмника в методах?
Для функций Scan, Scanln пакета fmt мы передаем указатель в качестве входного параметра.
Для функции func fibonacci(n int, fibMap map[int]int) int также можно принимать указатель в качестве входного параметра.
В качестве возвращаемых результатов в предыдущих заданиях не вижу необходимости возвращать указатель (по крайней мере в моей реализации).
Вообще вернуть указатель можно было бы при условии, что наша функция модифицирует большой внешний объект, для того, чтобы не копировать его целиком.

b. В каких случаях мы фактически имеем дело с указателями при передаче параметров, хотя явно их не указываем?
Когда работаем со сложными типами данных (slice или map), то по факту при передаче параметров мы имеем дело с указателями на нижележащий элемент (array или bucket)

2. Для арифметического умножения и разыменования указателей в Go используется один и тот же символ — оператор (*).
Как вы думаете, как компилятор Go понимает, в каких случаях в выражении имеется в виду умножение, а в каких — разыменование указателя?
Я думаю, что если "возле" оператора "*" имеется 2 операнда, то компилятор воспринимает это как умножение.
Если только один операнд - тогда как разыменование указателя.